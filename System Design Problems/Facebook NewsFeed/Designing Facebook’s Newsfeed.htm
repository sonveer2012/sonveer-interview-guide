<!DOCTYPE html>
<!-- saved from url=(0091)https://www.educative.io/collection/page/5668639101419520/5649050225344512/5641332169113600 -->
<html class="default js flexbox flexboxlegacy canvas canvastext webgl no-touch geolocation postmessage websqldatabase indexeddb hashchange history draganddrop websockets rgba hsla multiplebgs backgroundsize borderimage borderradius boxshadow textshadow opacity cssanimations csscolumns cssgradients cssreflections csstransforms csstransforms3d csstransitions fontface generatedcontent video audio localstorage sessionstorage webworkers applicationcache svg inlinesvg smil svgclippaths" dir="ltr"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta property="og:title" content="Designing Facebook’s Newsfeed" data-react-helmet="true">
    
    <meta http-equiv="X-UA-Compatible" content="IE=Edge,chrome=1">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link media="screen" rel="stylesheet" type="text/css" href="./Designing Facebook’s Newsfeed_files/style-529ff0ba0d9aa557fcf6b100c0d434fd.css">

    <meta property="fb:app_id" content="530312767132745">
    <meta property="og:type" content="website">
    <meta property="og:locale" content="en_US">
    <meta property="og:site_name" content="Educative: Interactive Courses for Software Developers">

    <meta name="twitter:site" content="@educativeinc">
    <meta name="twitter:domain" content="educative.io">
    <!-- <meta name="twitter:creator" content="@educativeinc" /> --><title>Designing Facebook’s Newsfeed</title>
        <meta property="og:title" content="Designing a URL Shortening service like TinyURL">
        <meta name="twitter:title" content="Designing a URL Shortening service like TinyURL"><meta name="description" content="Let&#39;s design a URL shortening service like TinyURL. This service will provide short aliases redirecting to long URLs. 

Similar services: bit.ly, goo.gl, 2020.fm etc.
Difficulty Level: Easy">
        <meta property="og:description" content="Let&#39;s design a URL shortening service like TinyURL. This service will provide short aliases redirecting to long URLs. 

Similar services: bit.ly, goo.gl, 2020.fm etc.
Difficulty Level: Easy">
        <meta name="twitter:description" content="Let&#39;s design a URL shortening service like TinyURL. This service will provide short aliases redirecting to long URLs. 

Similar services: bit.ly, goo.gl, 2020.fm etc.
Difficulty Level: Easy">
    <meta name="twitter:card" content="summary">
    <meta property="og:url" content="https://www.educative.io/collection/page/5668639101419520/5649050225344512/5668600916475904">
    

    <!-- Facebook Pixel Code -->
    <script async="" src="./Designing Facebook’s Newsfeed_files/analytics.js"></script><script src="./Designing Facebook’s Newsfeed_files/1637285686566701" async=""></script><script async="" src="./Designing Facebook’s Newsfeed_files/fbevents.js"></script><script>
    !function(f,b,e,v,n,t,s){if(f.fbq)return;n=f.fbq=function(){n.callMethod?
    n.callMethod.apply(n,arguments):n.queue.push(arguments)};if(!f._fbq)f._fbq=n;
    n.push=n;n.loaded=!0;n.version='2.0';n.queue=[];t=b.createElement(e);t.async=!0;
    t.src=v;s=b.getElementsByTagName(e)[0];s.parentNode.insertBefore(t,s)}(window,
    document,'script','https://connect.facebook.net/en_US/fbevents.js');
    fbq('init', '1637285686566701'); // Insert your pixel ID here.
    fbq('track', 'PageView');
    </script>
    <noscript>&lt;img height="1" width="1" style="display:none"
    src="https://www.facebook.com/tr?id=1637285686566701&amp;ev=PageView&amp;noscript=1"
    /&gt;</noscript>
    <!-- DO NOT MODIFY -->
    <!-- End Facebook Pixel Code -->

    <!-- Google Code for Course Sale Conversion Page -->
    <script type="text/javascript">
      /* <![CDATA[ */
      var google_conversion_id = 936783588;
      var google_conversion_language = "en";
      var google_conversion_format = "3";
      var google_conversion_color = "ffffff";
      var google_conversion_label = "S394CJmkkmwQ5N3YvgM";
      var google_conversion_value = 0.00;
      var google_conversion_currency = "USD";
      var google_remarketing_only = false;
      /* ]]> */
    </script>
    <script type="text/javascript" src="./Designing Facebook’s Newsfeed_files/conversion.js"></script><script src="./Designing Facebook’s Newsfeed_files/saved_resource"></script>
    <noscript>
      &lt;div style="display:inline;"&gt;
        &lt;img height="1" width="1" style="border-style:none;" alt="" src="//www.googleadservices.com/pagead/conversion/936783588/?value=0.00&amp;amp;currency_code=USD&amp;amp;label=S394CJmkkmwQ5N3YvgM&amp;amp;guid=ON&amp;amp;script=0"/&gt;
      &lt;/div&gt;
    </noscript>

<style type="text/css">.timezone-picker {
  display: inline-block;
  font: 13px sans-serif;
  position: relative;
}
.timezone-picker-textfield input {
  width: 100%;
  padding: 9px 12px;
  font: inherit;
  box-sizing: border-box;
  outline: 0;
  background: #fff;
  border: 1px solid #e6ebec;
  border-radius: 2px;
}
.timezone-picker-list {
  position: relative;
  top: 100%;
  left: 0;
  right: 0;
  max-height: 200px;
  overflow-y: auto;
  margin: 0;
  padding: 0;
  border: 1px solid #e6ebec;
  margin-top: -1px;
  border-radius: 0 0 3px 3px;
  display: none;
}
.timezone-picker-list-item {
  color: #444;
  padding: 5px 12px;
  cursor: pointer;
}
.timezone-picker-list-item:hover,
.timezone-picker-list-item-active {
  background: #ececec;
}
.timezone-picker-open .timezone-picker-list {
  display: block;
}
.timezone-picker-selected .timezone-picker-textfield input {
  color: #474747;
}
</style><style type="text/css">.react-json-view .copy-to-clipboard-container{vertical-align:top;display:none}.react-json-view .click-to-add,.react-json-view .click-to-edit,.react-json-view .click-to-remove{display:none}.react-json-view .object-content .variable-row:hover .click-to-edit,.react-json-view .object-content .variable-row:hover .click-to-remove,.react-json-view .object-key-val:hover>span>.object-meta-data>.click-to-add,.react-json-view .object-key-val:hover>span>.object-meta-data>.click-to-remove,.react-json-view .object-key-val:hover>span>.object-meta-data>.copy-to-clipboard-container,.react-json-view .variable-row:hover .copy-to-clipboard-container{display:inline-block}</style></head>
<body class="" data-version="1.0.0">
<div id="pace-loader" class="  pace-small                                     pace-running pace-done"><div class="pace  pace-inactive"><div class="pace-progress" data-progress-text="100%" data-progress="99" style="width: 100%;">
  <div class="pace-progress-inner"></div>
</div>
<div class="pace-activity"></div></div></div>
<div id="app-preloader"><div data-reactroot="" class="preloader" style="display: none;"><img src="./Designing Facebook’s Newsfeed_files/preloader.gif" width="128" height="128"></div></div>
<div id="app-container"><div data-reactroot="" class="b-root"><div><div id="app"><!-- react-empty: 4 --><div class="b-page b-page_dashboard b-page_sidebar"><section class="_270U05pynNkMrwixbrkhjJ _2ZLLTjaPGqWI5KW3XtXRlN"><header class="_2wttuAfHG2IeNhoEz60sZG"><div style="margin-top: 10px;"><a class="" href="https://www.educative.io/collection/5668639101419520/5649050225344512">Grokking the System Design Interview</a></div></header><div class="R74YplvBCNwXEkG8OsJEB _228oHS6IDw5BqrnGLeuaTm"><div class="b-search-component"><div class="form-group"><input type="text" placeholder="Search" value="" class="form-control"><button type="button" class="b-btn b-btn_secondary"><svg class="search-icon" x="0px" y="0px" viewBox="0 0 22.7 23.6"><g><path d="M2.6,15.1c3.2,3.2,8.1,3.4,11.5,0.7c0.5-0.4,0.7-0.6,1.3-1.3l0,0c2.8-3.5,2.6-8.7-0.6-11.9 c-3.4-3.4-8.9-3.4-12.3,0C-0.9,6.1-0.8,11.7,2.6,15.1z M4.1,4.2c2.5-2.6,6.7-2.6,9.2,0c2.6,2.6,2.6,6.8,0,9.4 c-2.5,2.6-6.7,2.6-9.2,0C1.5,11,1.5,6.8,4.1,4.2z"></path><polygon points="22.7,22 21.2,23.6 15.1,16.6 16.1,15.5  "></polygon></g></svg></button></div></div></div><ul class="EO18Ku2cc4xLydliqGsZm"><li><div class="_3LbMrY6BQRFf6-BJr6mKVf _1QW2zXWqsybxbsmuZTFHaM"><div class="_2atbo8um56usrfHjs46gk5" title="System Design Basics">System Design Basics</div><ul class="NN0suGydDO6Y7-LJxopxc"><div class="_2XyVYeDwDrshq9XVCGLD3I"><i class="fa fa-check lesson_check color_grey" aria-hidden="true"></i><li class="_1JGs8Ixi5x0px0VsLRY-0l"><div><a class="" href="https://www.educative.io/collection/page/5668639101419520/5649050225344512/5700735861784576">Why System Design Interviews?</a></div></li></div><div class="_2XyVYeDwDrshq9XVCGLD3I"><i class="fa fa-check lesson_check color_grey" aria-hidden="true"></i><li class="_1JGs8Ixi5x0px0VsLRY-0l"><div><a class="" href="https://www.educative.io/collection/page/5668639101419520/5649050225344512/5766466041282560">System Design Basics</a></div></li></div><div class="_2XyVYeDwDrshq9XVCGLD3I"><i class="fa fa-check lesson_check color_grey" aria-hidden="true"></i><li class="_1JGs8Ixi5x0px0VsLRY-0l"><div><a class="" href="https://www.educative.io/collection/page/5668639101419520/5649050225344512/5747976207073280">Load Balancing</a></div></li></div><div class="_2XyVYeDwDrshq9XVCGLD3I"><i class="fa fa-check lesson_check color_grey" aria-hidden="true"></i><li class="_1JGs8Ixi5x0px0VsLRY-0l"><div><a class="" href="https://www.educative.io/collection/page/5668639101419520/5649050225344512/5643440998055936">Caching</a></div></li></div><div class="_2XyVYeDwDrshq9XVCGLD3I"><i class="fa fa-check lesson_check color_grey" aria-hidden="true"></i><li class="_1JGs8Ixi5x0px0VsLRY-0l"><div><a class="" href="https://www.educative.io/collection/page/5668639101419520/5649050225344512/5146118144917504">Sharding or Data Partitioning</a></div></li></div><div class="_2XyVYeDwDrshq9XVCGLD3I"><i class="fa fa-check lesson_check color_grey" aria-hidden="true"></i><li class="_1JGs8Ixi5x0px0VsLRY-0l"><div><a class="" href="https://www.educative.io/collection/page/5668639101419520/5649050225344512/5681717746597888">Indexes</a></div></li></div><div class="_2XyVYeDwDrshq9XVCGLD3I"><i class="fa fa-check lesson_check color_grey" aria-hidden="true"></i><li class="_1JGs8Ixi5x0px0VsLRY-0l"><div><a class="" href="https://www.educative.io/collection/page/5668639101419520/5649050225344512/5185026253651968">Proxies</a></div></li></div><div class="_2XyVYeDwDrshq9XVCGLD3I"><i class="fa fa-check lesson_check color_grey" aria-hidden="true"></i><li class="_1JGs8Ixi5x0px0VsLRY-0l"><div><a class="" href="https://www.educative.io/collection/page/5668639101419520/5649050225344512/5080491044634624">Queues</a></div></li></div><div class="_2XyVYeDwDrshq9XVCGLD3I"><i class="fa fa-check lesson_check color_grey" aria-hidden="true"></i><li class="_1JGs8Ixi5x0px0VsLRY-0l"><div><a class="" href="https://www.educative.io/collection/page/5668639101419520/5649050225344512/5661458385862656">Redundancy and Replication</a></div></li></div><div class="_2XyVYeDwDrshq9XVCGLD3I"><i class="fa fa-check lesson_check color_grey" aria-hidden="true"></i><li class="_1JGs8Ixi5x0px0VsLRY-0l"><div><a class="" href="https://www.educative.io/collection/page/5668639101419520/5649050225344512/5728116278296576">SQL vs. NoSQL</a></div></li></div><div class="_2XyVYeDwDrshq9XVCGLD3I"><i class="fa fa-check lesson_check color_grey" aria-hidden="true"></i><li class="_1JGs8Ixi5x0px0VsLRY-0l"><div><a class="" href="https://www.educative.io/collection/page/5668639101419520/5649050225344512/5754903989321728">CAP Theorem</a></div></li></div><div class="_2XyVYeDwDrshq9XVCGLD3I"><i class="fa fa-check lesson_check color_grey" aria-hidden="true"></i><li class="_1JGs8Ixi5x0px0VsLRY-0l"><div><a class="" href="https://www.educative.io/collection/page/5668639101419520/5649050225344512/5709068098338816">Consistent Hashing</a></div></li></div><div class="_2XyVYeDwDrshq9XVCGLD3I"><i class="fa fa-check lesson_check color_grey" aria-hidden="true"></i><li class="_1JGs8Ixi5x0px0VsLRY-0l"><div><a class="" href="https://www.educative.io/collection/page/5668639101419520/5649050225344512/5715426797420544">Long-Polling vs WebSockets vs Server-Sent Events (*New*)</a></div></li></div></ul></div></li><li><div class="_3LbMrY6BQRFf6-BJr6mKVf _1bG7nU4sUi2BChqcIpQFHM"><div class="_2atbo8um56usrfHjs46gk5" title="System Design Problems">System Design Problems</div><ul class="NN0suGydDO6Y7-LJxopxc"><div class="_2XyVYeDwDrshq9XVCGLD3I"><i class="fa fa-check lesson_check color_grey" aria-hidden="true"></i><li class="_1JGs8Ixi5x0px0VsLRY-0l"><div><a class="" href="https://www.educative.io/collection/page/5668639101419520/5649050225344512/5684049913839616">System Design Interviews: A step by step guide</a></div></li></div><div class="_2XyVYeDwDrshq9XVCGLD3I"><i class="fa fa-check lesson_check color_grey" aria-hidden="true"></i><li class="_1JGs8Ixi5x0px0VsLRY-0l"><div><a class="" href="https://www.educative.io/collection/page/5668639101419520/5649050225344512/5668600916475904">Designing a URL Shortening service like TinyURL</a></div></li></div><div class="_2XyVYeDwDrshq9XVCGLD3I"><i class="fa fa-check lesson_check color_grey" aria-hidden="true"></i><li class="_1JGs8Ixi5x0px0VsLRY-0l"><div><a class="" href="https://www.educative.io/collection/page/5668639101419520/5649050225344512/5653164804014080">Designing Pastebin</a></div></li></div><div class="_2XyVYeDwDrshq9XVCGLD3I"><i class="fa fa-check lesson_check color_grey" aria-hidden="true"></i><li class="_1JGs8Ixi5x0px0VsLRY-0l"><div><a class="" href="https://www.educative.io/collection/page/5668639101419520/5649050225344512/5673385510043648">Designing Instagram</a></div></li></div><div class="_2XyVYeDwDrshq9XVCGLD3I"><i class="fa fa-check lesson_check color_grey" aria-hidden="true"></i><li class="_1JGs8Ixi5x0px0VsLRY-0l"><div><a class="" href="https://www.educative.io/collection/page/5668639101419520/5649050225344512/5693417237512192">Designing Dropbox</a></div></li></div><div class="_2XyVYeDwDrshq9XVCGLD3I"><i class="fa fa-check lesson_check color_grey" aria-hidden="true"></i><li class="_1JGs8Ixi5x0px0VsLRY-0l"><div><a class="" href="https://www.educative.io/collection/page/5668639101419520/5649050225344512/5724160613416960">Designing Facebook Messenger</a></div></li></div><div class="_2XyVYeDwDrshq9XVCGLD3I"><i class="fa fa-check lesson_check color_grey" aria-hidden="true"></i><li class="_1JGs8Ixi5x0px0VsLRY-0l"><div><a class="" href="https://www.educative.io/collection/page/5668639101419520/5649050225344512/5741031244955648">Designing Twitter</a></div></li></div><div class="_2XyVYeDwDrshq9XVCGLD3I"><i class="fa fa-check lesson_check color_grey" aria-hidden="true"></i><li class="_1JGs8Ixi5x0px0VsLRY-0l"><div><a class="" href="https://www.educative.io/collection/page/5668639101419520/5649050225344512/5649050225344512">Designing Youtube or Netflix</a></div></li></div><div class="_2XyVYeDwDrshq9XVCGLD3I"><i class="fa fa-check lesson_check color_grey" aria-hidden="true"></i><li class="_1JGs8Ixi5x0px0VsLRY-0l"><div><a class="" href="https://www.educative.io/collection/page/5668639101419520/5649050225344512/5076324926357504">Designing Typeahead Suggestion</a></div></li></div><div class="_2XyVYeDwDrshq9XVCGLD3I"><i class="fa fa-check lesson_check color_grey" aria-hidden="true"></i><li class="_1JGs8Ixi5x0px0VsLRY-0l"><div><a class="" href="https://www.educative.io/collection/page/5668639101419520/5649050225344512/5707274949492736">Designing an API Rate Limiter (*New*)</a></div></li></div><div class="_2XyVYeDwDrshq9XVCGLD3I"><i class="fa fa-check lesson_check color_grey" aria-hidden="true"></i><li class="_1JGs8Ixi5x0px0VsLRY-0l"><div><a class="" href="https://www.educative.io/collection/page/5668639101419520/5649050225344512/5738600293466112">Designing Twitter Search</a></div></li></div><div class="_2XyVYeDwDrshq9XVCGLD3I"><i class="fa fa-check lesson_check color_grey" aria-hidden="true"></i><li class="_1JGs8Ixi5x0px0VsLRY-0l"><div><a class="" href="https://www.educative.io/collection/page/5668639101419520/5649050225344512/5718998062727168">Designing a Web Crawler</a></div></li></div><div class="_2XyVYeDwDrshq9XVCGLD3I"><i class="fa fa-check lesson_check color_grey" aria-hidden="true"></i><li class="_1JGs8Ixi5x0px0VsLRY-0l"><div><a class="ZrZtLEVdJgB_HAMT1YlNs" href="https://www.educative.io/collection/page/5668639101419520/5649050225344512/5641332169113600">Designing Facebook’s Newsfeed</a></div></li></div><div class="_2XyVYeDwDrshq9XVCGLD3I"><i class="fa fa-check lesson_check color_grey" aria-hidden="true"></i><li class="_1JGs8Ixi5x0px0VsLRY-0l"><div><a class="" href="https://www.educative.io/collection/page/5668639101419520/5649050225344512/5639274879778816">Designing Yelp or Nearby Friends</a></div></li></div><div class="_2XyVYeDwDrshq9XVCGLD3I"><i class="fa fa-check lesson_check color_grey" aria-hidden="true"></i><li class="_1JGs8Ixi5x0px0VsLRY-0l"><div><a class="" href="https://www.educative.io/collection/page/5668639101419520/5649050225344512/5717271485874176">Designing Uber backend</a></div></li></div><div class="_2XyVYeDwDrshq9XVCGLD3I"><i class="fa fa-check lesson_check color_grey" aria-hidden="true"></i><li class="_1JGs8Ixi5x0px0VsLRY-0l"><div><a class="" href="https://www.educative.io/collection/page/5668639101419520/5649050225344512/5651874166341632">Design BookMyShow (*New*)</a></div></li></div></ul></div></li><li><div class="_3LbMrY6BQRFf6-BJr6mKVf _1bG7nU4sUi2BChqcIpQFHM"><div class="_2atbo8um56usrfHjs46gk5" title="Contact Us">Contact Us</div><ul class="NN0suGydDO6Y7-LJxopxc"><div class="_2XyVYeDwDrshq9XVCGLD3I"><i class="fa fa-check lesson_check color_grey" aria-hidden="true"></i><li class="_1JGs8Ixi5x0px0VsLRY-0l"><div><a class="" href="https://www.educative.io/collection/page/5668639101419520/5649050225344512/5697982787747840">Feedback</a></div></li></div></ul></div></li></ul></section><div class="_25SxXn_779J36FW_8yVmdX _3VJlRYP4nRRzKkJBvLXT5N"><header class="_2gV_nPmf5c_GHdNFnWxdmJ header_dim"><div class="EKg85xIkhyMLkc2Efqej8"><button class="_2-7UcGrzNTjrfPVQ1iNbQM b-btn b-btn_default" type="button"><span class="b-some-with-icon"><i class="b-some-with-icon-icon"><svg class="menu-icon" height="32px" version="1.1" viewBox="0 0 32 32" width="32px"><path d="M4,10h24c1.104,0,2-0.896,2-2s-0.896-2-2-2H4C2.896,6,2,6.896,2,8S2.896,10,4,10z M28,14H4c-1.104,0-2,0.896-2,2  s0.896,2,2,2h24c1.104,0,2-0.896,2-2S29.104,14,28,14z M28,22H4c-1.104,0-2,0.896-2,2s0.896,2,2,2h24c1.104,0,2-0.896,2-2  S29.104,22,28,22z"></path></svg></i></span></button><nav class="_3EVCovE_YeBRCZo93cUiLf"><a title="Learn" class="" href="https://www.educative.io/learn">Learn</a><a title="Teach" class="" href="https://www.educative.io/teach">Teach</a></nav></div><div class="_16RrvA-y9tK0t_sjqXmvY"><div class="_19VCV_MPfhtdB1UjWuUHfy"><div class="_2PkG8EwdlT0S465T-3b64f"><img src="./Designing Facebook’s Newsfeed_files/avatar-new.png"></div><div class="_2AHUo0qw5fP-KITgn6SJ8" style="right: -9999px;"><ul class="ISWX4Y00FbbM9Nq2CT98T"><li><a class="ZSOISAdKzLdG1Ns7KkMlh" href="https://www.educative.io/profile/view">My Profile</a><ul class="_2WSgTMK2-f_jaTmqEig_3D"><li><a class="ZSOISAdKzLdG1Ns7KkMlh" href="https://www.educative.io/profile/view">View</a></li><li><a class="ZSOISAdKzLdG1Ns7KkMlh" href="https://www.educative.io/profile/edit">Edit</a></li></ul></li><li><span class="ZSOISAdKzLdG1Ns7KkMlh">Logout</span></li></ul></div></div></div></header><div class="b-page b-page_dashboard scroll-container full_height_course_container"><!-- react-empty: 241 --><div class="toggle-sidebar"><div class="b-page__content no-padding"><div class="container"><!-- react-empty: 245 --><div class="_19MNfPnkx0vX2x5FyqmQgV"><div class="_14yqsroduwoTKnGhAvoMi6"><div class="_1APgtRr5raSmcV850sqmft"><h1 class="_3fBEwsM053hx2mPd0uV0nT">Designing Facebook’s Newsfeed</h1></div><div class="_2jN3CNQSkxP4Yuq2gAxGtm"><p class="_3I1jy_jPHThM_bfNVurwrA">Let's design Facebook's Newsfeed, which would contain posts, photos, videos and status updates from all the people and pages a user follows.

Similar Services: Twitter Newsfeed, Instagram Newsfeed, Quora Newsfeed
Difficulty Level: Hard</p></div></div></div><div class="_1ct7mn-l630OZVoYoSmQAk"><div class="dwOFXCXWnVebB6SXflxgz"><div data-prevent="prevent"><div data-prevent="prevent" class="educativeTextViewer"><h3><div style="color:black; background-color:#e2f4c7; border-radius:5px; padding:5px;">1. What is Facebook’s newsfeed?</div></h3>
<p data-id="80957b4919f01849cb2c93cb2078a603">Newsfeed&nbsp;is the constantly updating list of stories in the middle of Facebook’s homepage. It&nbsp;includes status updates, photos, videos, links, app activity and likes from people, pages, and groups that a user follows on&nbsp;Facebook. In other words, it’s a compilation of a complete scrollable version of your and your friends’ life story from photos, videos, locations, status updates and other activities.</p>
<p data-id="a00538651971d7fd1545e301ff11f1b6">Any social media site you design - Twitter, Instagram or Facebook, you will need some sort of newsfeed system to display updates from friends and followers.</p>
<h3><div style="color:black; background-color:#e2f4c7; border-radius:5px; padding:5px;">2. Requirements and Goals of the System</div></h3>
<p data-id="379855e76eb3748c15cadacc1932caa0">Let’s design a newsfeed for Facebook with the following requirements:</p>
<p data-id="463d199b2a358e6a0f1c4f4b30a000d1"><strong>Functional requirements:</strong></p>
<ol>
<li>Newsfeed will be generated based on the posts from the people, pages, and groups that a user follows.</li>
<li>A user may have many friends and follow a large number of pages/groups.</li>
<li>Feeds may contain images, videos or just text.</li>
<li>Our service should support appending new posts, as they arrive, to the newsfeed for all active users.</li>
</ol>
<p data-id="79e41556c276aa47af6a7e52ed46e20f"><strong>Non-functional requirements:</strong></p>
<ol>
<li>Our system should be able to generate any user’s newsfeed in real-time - maximum latency seen by the end user could be 2s.</li>
<li>A post shouldn’t take more than 5s to make it to a user’s feed assuming a new newsfeed request comes in.</li>
</ol>
<h3><div style="color:black; background-color:#e2f4c7; border-radius:5px; padding:5px;">3. Capacity Estimation and Constraints</div></h3>
<p data-id="d33a3dee1f82660c9a0802e9f1fa6ea7">Let’s assume on average a user has 300 friends and follows 200 pages.</p>
<p data-id="e44e21760011889f82c622fcc4308870"><strong>Traffic estimates:</strong> Let’s assume 300M daily active users, with each user fetching their timeline an average of five times a day. This will result in 1.5B newsfeed requests per day or approximately 17,500 requests per second.</p>
<p data-id="58ca5008d7290f3c7f0834c8e7ccdf89"><strong>Storage estimates:</strong> On average, let’s assume, we would need to have around 500 posts in every user’s feed that we want to keep in memory for a quick fetch. Let’s also assume that on average each post would be 1KB in size. This would mean that we need to store roughly 500KB of data per user. To store all this data for all the active users, we would need 150TB of memory. If a server can hold 100GB, we would need around 1500 machines to keep the top 500 posts in memory for all active users.</p>
<h3><div style="color:black; background-color:#e2f4c7; border-radius:5px; padding:5px;">4. System APIs</div></h3>
<center>
<p data-id="a186741a58e50a32b0168fc995b07d0e"><span style="font-size:2em;">💡</span>     &nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#787a42;font-weight: bold;font-style: italic;">
Once we’ve finalized the requirements, it’s always a good idea to define the system APIs. This would explicitly state what is expected from the system.</span></p>
</center>
<p data-id="8c79cdcba8509704687afffd357469a9">We can have SOAP or REST APIs to expose the functionality of our service. Following could be the definition of the API for getting the newsfeed:</p>
<div class="cm-viewer-markdown disable-cursor"><div class="CodeMirror cm-s-vibrant-ink"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 4px; left: 20px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;" tabindex="0"></textarea></div><div class="CodeMirror-vscrollbar" cm-not-content="true" style="width: 18px; pointer-events: none;"><div style="min-width: 1px; height: 0px;"></div></div><div class="CodeMirror-hscrollbar" cm-not-content="true" style="height: 18px; pointer-events: none;"><div style="height: 100%; min-height: 1px; width: 0px;"></div></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 30px; min-height: 32px; min-width: 666.766px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 4px; top: 0px; height: 24px;">&nbsp;</div></div><div class="CodeMirror-code" role="presentation"><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">getUserFeed</span>(<span class="cm-variable">api_dev_key</span>, <span class="cm-variable">user_id</span>, <span class="cm-variable">since_id</span>, <span class="cm-variable">count</span>, <span class="cm-variable">max_id</span>, <span class="cm-variable">exclude_replies</span>)</span></pre></div></div></div></div></div><div style="position: absolute; height: 30px; width: 1px; border-bottom: 0px solid transparent; top: 32px;"></div><div class="CodeMirror-gutters" style="display: none; height: 62px;"></div></div></div></div>
<p data-id="ee5395d3068f9ccb21008341e64fe210"><strong>Parameters:</strong><br>
api_dev_key (string): The API developer key of a registered account. This can be used to, among other things, throttle users based on their allocated quota.<br>
<strong>user_id (number):</strong> The ID of the user for whom the system will generate the newsfeed.<br>
<strong>since_id (number):</strong> Optional; returns results with an ID greater than (that is, more recent than) the specified ID.  &nbsp;
<strong>count (number):</strong> Optional; specifies the number of feed items to try and retrieve, up to a maximum of 200 per distinct request.<br>
<strong>max_id (number):</strong> Optional; returns results with an ID less than (that is, older than) or equal to the specified ID.<br>
<strong>exclude_replies(boolean):</strong> Optional; this parameter will prevent replies from appearing in the returned timeline.</p>
<p data-id="d961362de17f59b84728b0a36af3ef17"><strong>Returns:</strong>&nbsp;(JSON)
Returns a JSON object containing a list of feed items.</p>
<h3><div style="color:black; background-color:#e2f4c7; border-radius:5px; padding:5px;">5. Database Design</div></h3>
<p data-id="9302249936813e4a294c64cb5f42e690">There are three basic objects: User, Entity (e.g., page, group, etc.) and FeedItem (or Post). Here are some observations about the relationships between these entities:</p>
<ul>
<li>A User can follow entities and can become friends with other users.</li>
<li>Both users and entities can post FeedItems which can contain text, images or videos.</li>
<li>Each FeedItem will have a UserID which would point to the User who created it. For simplicity, let’s assume that only users can create feed items, although on Facebook, Pages can post feed item too.</li>
<li>Each FeedItem can optionally have an EntityID pointing to the page or the group where that post was created.</li>
</ul>
<p data-id="4159b3a3f1ceb875f287b0b2b45e5608">If we are using a relational database, we would need to model two relations: User-Entity relation and FeedItem-Media relation. Since each user can be friends with many people and follow a lot of entities, we can store this relation in a separate table. The “Type” column in “UserFollow” identifies if the entity being followed is a User or Entity. Similarly, we can have a table for FeedMedia relation.</p>
</div></div></div><div class="dwOFXCXWnVebB6SXflxgz"><div style="margin-top: 30px; margin-bottom: 30px;"><div style="text-align: center;"><div class="_2ZEMvpnYCwBmMw1w1bYcO_"><img src="./Designing Facebook’s Newsfeed_files/5713144022302720.png" class="_2O7c-mPHnxwifWp1ZBBxje _3ZCktA-9VLxEJLpXyE6DuL" style="cursor: zoom-in;"></div></div><!-- react-empty: 1416 --></div></div><div class="dwOFXCXWnVebB6SXflxgz"><div data-prevent="prevent"><div data-prevent="prevent" class="educativeTextViewer"><h3><div style="color:black; background-color:#E2f4c7; border-radius:5px; padding:5px;">6. High Level System Design</div></h3>

<p data-id="d22eec5556d980e149f60f55ed452bc1">At a high level this problem can be divided into two parts:</p>
<p data-id="c2d1396e340edf7a1d0a596252d468f6"><strong>Feed generation:</strong> Newsfeed is generated from the posts (or feed items) of users and entities (pages and groups) that a user follows. So, whenever our system receives a request to generate the feed for a user (say Jane), we will perform following steps:</p>
<ol>
<li>Retrieve IDs of all users and entities that Jane follows.</li>
<li>Retrieve latest, most popular and relevant posts for those IDs. These are the potential posts that we can show in Jane’s newsfeed.</li>
<li>Rank these posts, based on the relevance to Jane. This represents Jane’s current feed.</li>
<li>Store this feed in the cache and return top posts (say 20) to be rendered on Jane’s feed.</li>
<li>On the front-end when Jane reaches the end of her current feed, she can fetch next 20 posts from the server and so on.</li>
</ol>
<p data-id="d886f130a3485ffed2796ae44b46a4ef">One thing to notice here is that we generated the feed once and stored it in cache. What about new incoming posts from people that Jane follows? If Jane is online, we should have a mechanism to rank and add those new posts to her feed. We can periodically (say every five minutes) perform the above steps to rank and add the newer posts to her feed. Jane can then be notified that there are newer items in her feed that she can fetch.</p>
<p data-id="e67f9dc9ca44ffdc3e45dbd27804c7a7"><strong>Feed publishing:</strong> Whenever Jane loads her newsfeed page, she has to request and pull feed items from the server. When she reaches the end of her current feed, she can pull more data from the server. For newer items either the server can notify Jane and then she can pull, or the server can push these new posts. We will discuss these options in detail later.</p>
<p data-id="8aae69d9bcb2750c52789d38aecf5aff">At a high level, we would need following components in our Newsfeed service:</p>
<ol>
<li><strong>Web servers:</strong> To maintain a connection with the user. This connection will be used to transfer data between the user and the server.</li>
<li><strong>Application server:</strong> To execute the workflows of storing new posts in the database servers. We would also need some application servers to retrieve and push the newsfeed to the end user.</li>
<li><strong>Metadata database and cache:</strong> To store the metadata about Users, Pages and Groups.</li>
<li><strong>Posts database and cache:</strong> To store metadata about posts and their contents.</li>
<li><strong>Video and photo storage, and cache:</strong> Blob storage, to store all the media included in the posts.</li>
<li><strong>Newsfeed generation service:</strong> To gather and rank all the relevant posts for a user to generate newsfeed and store in the cache. This service would also receive live updates and will add these newer feed items to any user’s timeline.</li>
<li><strong>Feed notification service:</strong> To notify the user that there are newer items available for their newsfeed.</li>
</ol>
<p data-id="a97ac5d69d718c36b680137700995d40">Following is the high-level architecture diagram of our system. User B and C are following User A.</p>
</div></div></div><div class="dwOFXCXWnVebB6SXflxgz"><div style="margin-top: 30px; margin-bottom: 30px;"><div style="text-align: center;"><div class="_2ZEMvpnYCwBmMw1w1bYcO_"><img src="./Designing Facebook’s Newsfeed_files/5674248798470144.png" class="_2O7c-mPHnxwifWp1ZBBxje _3ZCktA-9VLxEJLpXyE6DuL" style="cursor: zoom-in;"></div></div><div class="_1Gz-UoLSlEmqGCNl2-GUvL"><span class="cmcomp-caption fg-black75">Facebook Newsfeed Architecture</span></div></div></div><div class="dwOFXCXWnVebB6SXflxgz"><div data-prevent="prevent"><div data-prevent="prevent" class="educativeTextViewer"><h3><div style="color:black; background-color:#E2f4c7; border-radius:5px; padding:5px;">7. Detailed Component Design</div></h3>
<p data-id="09e4099012c6ffd36c570f60e74be177">Let’s discuss different components of our system in detail.</p>
<p data-id="b0d6a3c25ec32c9da38f1aaf24fea4cb"><strong>a. Feed generation</strong><br>
Let’s take the simple case of the newsfeed generation service fetching most recent posts from all the users and entities that Jane follows; the query would look like this:</p>
<div class="cm-viewer-markdown disable-cursor"><div class="CodeMirror cm-s-vibrant-ink"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 4px; left: 20px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;" tabindex="0"></textarea></div><div class="CodeMirror-vscrollbar" cm-not-content="true" style="width: 18px; pointer-events: none;"><div style="min-width: 1px; height: 0px;"></div></div><div class="CodeMirror-hscrollbar" cm-not-content="true" style="height: 18px; pointer-events: none;"><div style="height: 100%; min-height: 1px; width: 0px;"></div></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 30px; min-height: 128px; min-width: 657.969px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 4px; top: 0px; height: 24px;">&nbsp;</div></div><div class="CodeMirror-code" role="presentation" style=""><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">SELECT</span> <span class="cm-variable">FeedItemID</span> <span class="cm-variable">FROM</span> <span class="cm-variable">FeedItem</span> <span class="cm-variable">WHERE</span> <span class="cm-variable">SourceID</span> <span class="cm-keyword">in</span> (</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tab" role="presentation" cm-text="	">  </span><span class="cm-variable">SELECT</span> <span class="cm-variable">EntityOrFriendID</span> <span class="cm-variable">FROM</span> <span class="cm-variable">UserFollow</span> <span class="cm-variable">WHERE</span> <span class="cm-variable">UserID</span> <span class="cm-operator">=</span> <span class="cm-operator">&lt;</span><span class="cm-variable">current_user_id</span><span class="cm-operator">&gt;</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">)</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">ORDER</span> <span class="cm-variable">BY</span> <span class="cm-variable">CreationDate</span> <span class="cm-variable">DESC</span> </span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">LIMIT</span> <span class="cm-number">100</span></span></pre></div></div></div></div></div><div style="position: absolute; height: 30px; width: 1px; border-bottom: 0px solid transparent; top: 128px;"></div><div class="CodeMirror-gutters" style="display: none; height: 158px;"></div></div></div></div>
<p data-id="9e5700c9ad413e9a6f1c1cb826bd3ef0">Here are issues with this design for the feed generation service:</p>
<ol>
<li>Crazy slow for users with a lot of friends/follows as we have to perform sorting/merging/ranking of a huge number of posts.</li>
<li>We generate the timeline when a user loads their page. This would be quite slow and have a high latency.</li>
<li>For live updates, each status update will result in feed updates for all followers. This could result in high backlogs in our Newsfeed Generation Service.</li>
<li>For live updates, the server pushing (or notifying about) newer posts to users could lead to very heavy loads, especially for people or pages that have a lot of followers.
To improve the efficiency, we can pre-generate the timeline and store it in a memory.</li>
</ol>
<p data-id="afc2d49928bbbd7fd53ab88e179d52b5"><strong>Offline generation for newsfeed:</strong>&nbsp;We can have dedicated servers that are continuously generating users’ newsfeed and storing them in memory. So, whenever a user requests for the new posts for their feed, we can simply serve it from the pre-generated, stored location. Using this scheme user’s newsfeed is not compiled on load, but rather on a regular basis and returned to users whenever they request for it.</p>
<p data-id="8b2cbf4973cee637c3acb1af746468f2">Whenever these servers need to generate the feed for a user, they would first query to see what was the last time the feed was generated for that user. Then, new feed data would be generated from that time onwards. We can store this data in a hash table, where the “key” would be UserID and “value” would be a STRUCT like this:</p>
<div class="cm-viewer-markdown disable-cursor"><div class="CodeMirror cm-s-vibrant-ink"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 4px; left: 20px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;" tabindex="0"></textarea></div><div class="CodeMirror-vscrollbar" cm-not-content="true" style="width: 18px; pointer-events: none;"><div style="min-width: 1px; height: 0px;"></div></div><div class="CodeMirror-hscrollbar" cm-not-content="true" style="height: 18px; pointer-events: none;"><div style="height: 100%; min-height: 1px; width: 0px;"></div></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 30px; min-height: 104px; min-width: 358.875px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 4px; top: 0px; height: 24px;">&nbsp;</div></div><div class="CodeMirror-code" role="presentation"><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-variable">Struct</span> {</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-variable">LinkedHashMap</span><span class="cm-operator">&lt;</span><span class="cm-variable">FeedItemID</span><span class="cm-operator">&gt;</span> <span class="cm-variable">feedItems</span>;</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-variable">DateTime</span> <span class="cm-variable">lastGenerated</span>;</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">}</span></pre></div></div></div></div></div><div style="position: absolute; height: 30px; width: 1px; border-bottom: 0px solid transparent; top: 104px;"></div><div class="CodeMirror-gutters" style="display: none; height: 134px;"></div></div></div></div>
<p data-id="7cacb79bebc80c8b5a4ef12185db716f">We can store FeedItemIDs in a <a href="https://docs.oracle.com/javase/7/docs/api/java/util/LinkedHashMap.html" target="_blank">Linked HashMap</a>, which will enable us to not only jump to any feed item but also iterate through the map easily. Whenever users want to fetch more feed items, they can send the last FeedItemID they currently see in their newsfeed, we can then jump to that FeedItemID in our linked hash map and return next batch / page of feed items from there.</p>
<p data-id="de99667c69eaec05ce8c855b8344f230"><strong>How many feed items should we store in memory for a user’s feed?</strong> Initially, we can decide to store 500 feed items per user, but this number can be adjusted later based on the usage pattern. For example, if we assume that one page of user’s feed has 20 posts and most of the users never browse more than ten pages of their feed, we can decide to store only 200 posts per user. For any user, who wants to see more posts (more than what is stored in memory) we can always query backend servers.</p>
<p data-id="0e2affbd0ba58378f1022930ee17439e"><strong>Should we generate (and keep in memory) newsfeed for all users?</strong> There will be a lot of users that don’t login frequently. Here are a few things we can do to handle this. A simpler approach could be to use an LRU based cache that can remove users from memory that haven’t accessed their newsfeed for a long time. A smarter solution can figure out the login pattern of users to pre-generate their newsfeed, e.g., At what time of the day a user is active? Which days of the week a user accesses their newsfeed? etc.</p>
<p data-id="8c06346d1583c5a32788ded3de0f6e4b">Let’s now discuss some solutions to our “live updates” problems in the following section.</p>
<p data-id="22f21a517c15a55e692d064ecff2bea9"><strong>b.	Feed publishing</strong><br>
The process of pushing a post to all the followers is called a fanout. By analogy, the push approach is called fanout-on-write, while the pull approach is called fanout-on-load.
Let’s discuss different options of publishing feed data to users.</p>
<ol>
<li>
<p data-id="5c02078180505f2cbff69d89662268c4"><strong>“Pull” model or Fan-out-on-load:</strong>&nbsp;This method involves keeping all the recent feed data in memory so that users can pull it from the server whenever they need it. Clients can pull the feed data on a regular basis or manually whenever they need it. Possible problems with this approach are a) New data might not be shown to the users until they issue a pull request, b) It’s hard to find the right pull cadence, as most of the time pull requests will result in an empty response if there is no new data, causing waste of resources.</p>
</li>
<li>
<p data-id="68f73b72616acc30d382c55a68e25771"><strong>“Push” model or Fan-out-on-write:</strong> For a push system, once a user has published a post, we can immediately push this post to all her followers. The advantage is that when fetching feed, you don’t need to go through your friends list and get feeds for each of them. It significantly reduces read operations. To efficiently manage this, users have to maintain a&nbsp;<a href="https://en.wikipedia.org/wiki/Push_technology#Long_polling" target="_blank">Long Poll</a>&nbsp;request with the server for receiving the updates. A possible problem with this approach is that when a user has millions of followers (or a celebrity-user), the server has to push updates to a lot of people.</p>
</li>
<li>
<p data-id="3a3ebb472dd90709bd7f080116da3a9b"><strong>Hybrid:</strong>&nbsp;Another interesting approach to handle feed data could be to use a hybrid approach, i.e., to do a combination of fan-out-on-write and fan-out-on-load. Specifically, we can stop pushing posts from users with a high number of followers (a celebrity user) and only push data for those users who have a few hundred (or thousand) followers. For celebrity users, we can let the followers pull the updates. Since the push operation can be extremely costly for users who have a lot of friends or followers therefore, by disabling fanout for them, we can save a huge number of resources. Another alternate approach could be that once a user publishes a post; we can limit the fanout to only her online friends. Also, to get benefits of both the approaches, a combination of push to notify and pull for serving end users is a great way to go. Purely push or pull model is less versatile.</p>
</li>
</ol>
<p data-id="ef7ac82bc67ce41dfc76eb09ab9a57e0"><strong>How many feed items can we return to the client in each request?</strong> We should have a maximum limit for the number of items a user can fetch in one request (say 20). But we should let clients choose to specify how many feed items they want with each request, as the user may like to fetch a different number of posts depending on the device (mobile vs desktop).</p>
<p data-id="05ddf67412ed755e1f81e6939f2e4df3"><strong>Should we always notify users if there are new posts available for their newsfeed?</strong> It could be useful for users to get notified whenever new data is available. However, on mobile devices, where data usage is relatively expensive, it can consume unnecessary bandwidth. Hence, at least for mobile devices, we can choose not to push data, instead let users “Pull to Refresh” to get new posts.</p>
<h3><div style="color:black; background-color:#E2f4c7; border-radius:5px; padding:5px;">8. Feed Ranking</div></h3>
<p data-id="8ceb38769303da243b2438aa8e6cab81">The most straightforward way to rank posts in a newsfeed is by the creation time of the posts. But today’s ranking algorithms are doing a lot more than that to ensure “important” posts are ranked higher. The high-level idea of ranking is to first select key “signals” that make a post important and then figure out how to combine them to calculate a final ranking score.</p>
<p data-id="78cfebe81db75818968dbbc7eb1b511e">More specifically, we can select features that are relevant to the importance of any feed item, e.g. number of likes, comments, shares, time of the update, whether the post has images/videos, etc., and then, a score can be calculated using these features. This is generally enough for a simple ranking system. A better ranking system can significantly improve itself by constantly evaluating if we are making progress in user stickiness, retention, ads revenue, etc.</p>
<h3><div style="color:black; background-color:#E2f4c7; border-radius:5px; padding:5px;">9. Data Partitioning</div></h3>

<p data-id="d1b90de06da9fe6367cbe98ad9670830"><strong>a. Sharding posts and metadata</strong><br>
Since we have a huge number of new posts every day and our read load is extremely high too, we need to distribute our data onto multiple machines such that we can read/write it efficiently. For sharding our databases that are storing posts and their metadata, we can have a similar design as discussed under <a href="https://www.educative.io/collection/page/5668639101419520/5649050225344512/5741031244955648/" target="_blank">Designing Twitter</a>.</p>
<p data-id="e81034b50f51e35fc6bdb70e893c062d"><strong>b.	Sharding feed data</strong><br>
For feed data, which is being stored in memory, we can partition it based on UserID.&nbsp;We can try storing all the data of a user on one server. when storing, we can pass the UserID to our hash function that will map the user to a cache server where we will store the user’s feed objects. Also, for any given user, since we don’t expect to store more than 500 FeedItmeIDs, we wouldn’t run into a scenario where feed data for a user doesn’t fit on a single server. To get the feed of a user, we would always have to query only one server. For future growth and replication, we must use <a href="https://www.educative.io/collection/page/5668639101419520/5649050225344512/5709068098338816" target="_blank">Consistent Hashing</a>.</p>
</div></div></div></div><div><div class="HXhONXAf5fJUrFobh2Jpa"><a class="_3Ivp8776xGNEAz-5YQlK1E" href="https://www.educative.io/collection/page/5668639101419520/5649050225344512/5639274879778816"><i class="fa fa-check lesson_check color_grey" aria-hidden="true"></i><!-- react-text: 1434 -->Mark as completed<!-- /react-text --></a></div><div class="_3QV2MXyax7C5sAlCIIZm-8"><a class="dabOoFWHTyVLMHZSrgdeH" href="https://www.educative.io/collection/page/5668639101419520/5649050225344512/5718998062727168"><em>← Previous</em><span style="font-weight: 300;">Designing a Web Crawler</span></a><a class="_3xvNwYsLARfJJSyZ7OCYTP" href="https://www.educative.io/collection/page/5668639101419520/5649050225344512/5639274879778816"><em>Next →</em><span style="font-weight: 300;">Designing Yelp or Nearby Friends</span></a></div></div><div class="_35imuQ6bVHlO34ZzPn0WsB"><div id="recomentation_menu_wrapper" class="_2J8XF1D-zhmPfYCglhYgH9 "><!-- react-empty: 1444 --><div class="_3QH5Q5YH-WJ_05eemdcn98">Send feedback or ask a question</div><div class="_2_wrkSOIigdwVSsoQHjnjV"><button type="button" class="b-btn"><span class="b-some-with-icon"><i class="b-some-with-icon-icon"><svg class="heart-icon" width="1792" height="1792" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><path d="M1664 596q0-81-21.5-143t-55-98.5-81.5-59.5-94-31-98-8-112 25.5-110.5 64-86.5 72-60 61.5q-18 22-49 22t-49-22q-24-28-60-61.5t-86.5-72-110.5-64-112-25.5-98 8-94 31-81.5 59.5-55 98.5-21.5 143q0 168 187 355l581 560 580-559q188-188 188-356zm128 0q0 221-229 450l-623 600q-18 18-44 18t-44-18l-624-602q-10-8-27.5-26t-55.5-65.5-68-97.5-53.5-121-23.5-138q0-220 127-344t351-124q62 0 126.5 21.5t120 58 95.5 68.5 76 68q36-36 76-68t95.5-68.5 120-58 126.5-21.5q224 0 351 124t127 344z"></path></svg></i></span></button><span><!-- react-text: 1453 -->12<!-- /react-text --><!-- react-text: 1454 --> recommendation<!-- /react-text --><!-- react-text: 1455 -->s<!-- /react-text --></span></div></div></div></div></div></div><footer class="_1r4y67aae3cNVDUY3gGsCJ b-footer"><nav class="_1CZ-NgVp7cr0LA38LyfK86 _3qmC_-X6D6Kq4XsLugcOP5 navbar navbar-default"><div id="footer_menu_container" class="container txt_center"><ul class="nav navbar-nav fr_responsive"><li><a class="link" href="https://www.educative.io/learn">Home</a></li><li><a class="link" href="https://www.educative.io/learn">Featured</a></li><li><a class="link" href="https://www.educative.io/team">Team</a><!-- react-text: 287 --> <!-- /react-text --></li><li><a class="link" href="https://www.educative.io/collection/6630002/190001">Blog</a></li><li><a class="link" href="https://www.educative.io/collection/page/6630002/170001/220001">FAQ</a></li><li><a class="link" href="https://www.educative.io/terms">Terms of Service</a></li><li><a href="mailto:contact@educative.io">Contact Us</a></li></ul></div></nav></footer></div></div></div><!-- react-empty: 35 --><span></span></div></div></div></div>

<script type="text/javascript" src="./Designing Facebook’s Newsfeed_files/vendor.prod-97cab822069d981b24a0d6fe561cc7a6.js"></script>

<script type="text/javascript" src="./Designing Facebook’s Newsfeed_files/modernizr.min.js"></script>
<script type="text/javascript" src="./Designing Facebook’s Newsfeed_files/educative.prod-040b058a3f4c9db04990a5a95d76dc64.js"></script>



<svg id="SvgjsSvg1001" width="2" height="0" xmlns="http://www.w3.org/2000/svg" version="1.1" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.com/svgjs" style="overflow: hidden; top: -100%; left: -100%; position: absolute; opacity: 0;"><defs id="SvgjsDefs1002"></defs><polyline id="SvgjsPolyline1003" points="0,0"></polyline><path id="SvgjsPath1004" d="M0 0 "></path></svg><script src="./Designing Facebook’s Newsfeed_files/babel.min.js" async=""></script></body></html>